#!/usr/bin/env node

'use strict';

var pkg = require('../package.json');
var fs = require('fs');
var path = require('path');
var Docker = require('dockerode');
var async = require('async');
var util = require('util');
var parseArgs = require('minimist')

var esl = require('../lib/etc-services-lookup.js');

var help = [
            'usage: docker-dns [options]',
            '',
            'Starts a docker-dns server',
            '',
            'options:',
            '  -c, --config    CONFIGFILE Location of the configuration file',
            '  -d, --debug     turn on debuging',
            '  -h, --help      Display help',
            '  -v, --version   version information',
            '',
            'more info:',
            'https://github.com/bnfinet/docker-dns',
            '',
        ].join('\n');

var argv = parseArgs(process.argv)
if (argv.h || argv.help) {
    return util.puts(help);
    process.exit();
}

if (argv.v || argv.version) {
	return util.puts('docker-dns version ' + pkg.version);
	process.exit();
}

var configFile = argv.c || argv.config;

if (!configFile) {
// configFile = path.resolve(__dirname, '..', 'config', 'config.js');
    if (process.env.DOCKER_DNS_CONFIG !== undefined) {
        configFile = configFile.replace(/\.js$/, '_' + process.env.DOCKER_DNS_CONFIG + '.js');
    }
}

if (!configFile) {
    return util.puts(help);
	process.exit();
}

console.log('Loading config from ' + configFile);
var config = require(configFile);

if (argv.d || argv.debug) {
	config.debug = true;
}

var recs = { 
		a: [], 
		cname: [], 
		srv: [] 
};


var main = function(cb) {
	initializeDockers(function() {
		pollDockers(function(err) {
			if (config.debug) {
				console.log(recs);
			}
			if (err) {
				console.log('initialization failed');
			} else {
				console.log('docker-dns initialized');
	
				// pollForEvents();
				// setInterval(pollForEvents, pollInterval);
// setInterval(refreshRecs, config.pollinterval);

			}
		});
	});
};

var initializeDockers = function (cb) {
	async.each(config.dockers, function(docker, done) {
		docker.D = new Docker(docker.dockerode);
		done();
	}, cb);
};

var pollDockers = function(cb) {
	async.each(config.dockers, function(docker, done) {

	}, cb);	
};


var refreshRecs = function() {
	a = [];
	cname = [];
	srv = [];
	pollDockers(function() {
		console.log("refreshed records");
	});
};



/*
 * not implemented
 * 
 * var pollInterval = config.pollinterval; var last = Date.now() - pollInterval;
 * var pollForEvents = function() { var time = Date.now(); docker.D.getEvents({
 * since : last }, function(err, data) { if (config.debug) {
 * console.log("---EVENT---", last, data); } if (err) { console.log("event
 * error: ", err); } else {
 *  } last = time - pollInterval; }); };
 */

main();
setInterval(main, config.pollinterval);